<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">

	<!-- 2. Definir el prefijo y sufijo de las carpetas -->
	<!-- ViewResolver : Es el encargado de resolver el nombre lógico que regresa un controlador en un objeto ModelAndView, a un
		                nombre de archivo físico que el navegador podrá desplegar al usuario junto con los resultados procesados.
		 Spring MVC cuenta con cuatro View Resolvers procesados: 
		 
		 InternalResourceViewResolver : Resuelve los nombres lógicos en un archivo de tipo View que es convertido utilizando una
		 								plantilla de archivos como JSP, JSTL o Velocity.
		 BeanNameViewResolver		  : Resuelve los nombres lógicos de las vistas en beans de tipo View en el applicationContext 
		 								del DispatcherServlet.
		 ResourceBundleMessageSource  : Resuelve los nombres lógicos de las vistas en objetos de tipo view contenidos en un 
		 								ResourceBundle o un archivo con extensión .properties 
		 XMLViewResolver			  : Resuelve los nombres lógicos de las vistas que se encuentran en un archivo XML separado.		 								
	 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 
			Las propiedades de InternalResourceViewResolver son valores fijos (viewClass, prefix, suffix)
			viewClass : Sirve para especificar que tipo de plantilla se quiere usar para desplegar la vista, en este caso se
						utilizó JSTL (Java Standard Tag Library).
			prefix	  : Prefijo que antecederá al nombre lógico de la vista, generalmente es la ruta donde se encontrarán los JSP.
			suffix	  : Sufijo que tendrán nuestras vistas, ya que los nombres fisicos que se utilizan son JSPs se les asigna la
						extensión .jsp. 
		 -->

        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>        
    </bean>

	<!-- 3. Definir la configuración del archivo properties  -->
	<!-- 
		El id debe llamarse messageSource caso contrario no identificará el formato (fm) en los jsp.
		Lo mismo para el nombre de la propiedad debe denominarse basename
	 -->
	
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="/propiedad/messages_ES"></property>
	</bean>

<!--
		5. Definicion del bean para la clase Usuario 
	 -->
	 <bean id="idCDUsuarioStatic" class="etg.bbva.modelo.impl.CDUsuarioDAOStatic"></bean>	
	 <bean id="idCDUsuarioOtraImpl" class="etg.bbva.modelo.impl2.CDUsuarioDAOOtraImpl"></bean>			 
</beans>
